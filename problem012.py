''' Project Euler Problem 12: 

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''
import math

def isPrime(number):
    """Return True if *number* is prime."""
    if number in (0, 1):
        return False

    for element in xrange(2, (number/2)):
		if number % element == 0:
			return False
    return True

def findNumOfDivisors(divident):
	numOfDivisor=1
	for divisor in range(1, int(math.sqrt(divident) + 1)):
		power=0
		while(divident%divisor == 0):
			quotient=divident/divisor
			divident=quotient
			power=power+1
			if isPrime(divident):
				primeArray.append(divisor)
				powerArray.append(power)
				break
	
	for iter in range(0,len(primeArray)):
		numOfDivisor=numOfDivisor*(powerArray[iter]+1)
	print(primeArray)
	print(powerArray)
	return numOfDivisor

col=1	

while col:
	triangularNum=0
	for row in range(1,col+1):
		triangularNum=triangularNum+row
	
	if(findNumOfDivisors(triangularNum)>4):
		print("\n triangularNum=%d")%(triangularNum)
		break
	col=col+1	

	